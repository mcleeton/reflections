What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository will create an empty git repository (a .git directory with a few subdirectories). An initial Head file that references the head of the master branch is also created. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area lets you manipulate more than one file before committing a current 'snapshot' of your project. By manipulating that staging area you can control what files are included (or excluded) from a given commit.

How can you use the staging area to make sure you have one commit per logical change?

	Using the staging area properly (by using 'git add' when modifying the file for each logical component) will allow you to create commits for only those files you modify, and essentially help isolate/describe logical changes. Using these features properly will help create more logical divisions to changes in the code.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	Branches would be helpful when trying to make substantial change to your code-base that is experimental, or if you want to more easily keep a current working prototype available at all times. Branches help prevent the need to refer back to a previous commit to find a stable build that does not include experimental ideas or new changes, and also allow merging at a later date if those changes work out.

How do the diagrams help you visualize the branch structure?
	
	Diagrams help me visualize the branch structure by describing the relationships between commits (their parents), the parallel nature of different branches, and how it is possible to have unreachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result of merging two branches together is that it combines the content of both branches into the current commit. By doing so, we retain the details from each commit and utilize the feature/bug fixes from each individual branch in the master/tip of the new merged commit. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Positives of Git's automatic merging include fast resolution of merging. If there only correlating changes(ie:no conflicts) between the different branches, Git is smart enough to produce a good merge that requires no additonal input. Cons of automatic merging may mean that if both branches have changes to the same code, or different contributors found different solutions to the same problem, the merge may not produce the best outcome of using the best solution. Manually doing merges will take more time and effort to find each individual conflict and pick the best solution, but manual merging may help you retain the best solution and end up with a higher quality outcome in the code.