What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository will create an empty git repository (a .git directory with a few subdirectories). An initial Head file that references the head of the master branch is also created. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area lets you manipulate more than one file before committing a current 'snapshot' of your project. By manipulating that staging area you can control what files are included (or excluded) from a given commit.

How can you use the staging area to make sure you have one commit per logical change?

	Using the staging area properly (by using 'git add' when modifying the file for each logical component) will allow you to create commits for only those files you modify, and essentially help isolate/describe logical changes. Using these features properly will help create more logical divisions to changes in the code.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	Branches would be helpful when trying to make substantial change to your code-base that is experimental, or if you want to more easily keep a current working prototype available at all times. Branches help prevent the need to refer back to a previous commit to find a stable build that does not include experimental ideas or new changes, and also allow merging at a later date if those changes work out.

How do the diagrams help you visualize the branch structure?
	
	Diagrams help me visualize the branch structure by describing the relationships between commits (their parents), the parallel nature of different branches, and how it is possible to have unreachable commits.