How did viewing a diff between two versions of a file help you see the bug that
was introduced?

   Have a quick comparison of only the changed code was life-changing! Why weren't such toosl included in my other programming classes!?

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    This would allow you to edit the file without fear you would introduce additional bugs into the program. If you can compare your changes, you would easily be able to find the place where you had a typo or introduced additional error. Additionally, version control would allow you to revert to a saved previous version that was working at a prior date.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing when to commit allows you to be flexible in what is saved, but in the flexibility is uncertainty. Automatically saved options would provide reassurance that you always have a prior version, but perhaps would leave unlogical points when you are still working on one logical structure that is unfinished.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Saving multiple files in one commit is useful when files are linked. In programming there are often multiple inter-dependencies among a group of files, and saving those separately for each commit would require you to find the correct corresponding individual files each time you want to revert to a prior version. Google Docs and others treat files separately because they are not focused on programming or disciplines which often have interdependencies in the files.

How can you use the commands git log and git diff to view the history of files?

    Git log provides a log of all commits to the repository, with a description of each commit. Git diff can be used to compare the specific differences of any or all of those different commits.

How might using version control make you more confident to make changes that
could break something?

    Using version control will allow the user to make large changes, experiment with new ideas, and provided that they have committed often enough they will be able to revert back to a working copy of their code. Having redundancy in older versions and the opportunity to quickly compare any changes really improves the efficiency of writing and editing code.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
